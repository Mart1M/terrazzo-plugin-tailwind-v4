import { parse as parseJSON, print, } from '@humanwhocodes/momoa';
export const CHILD_KEYS = {
    Document: ['body'],
    Object: ['members'],
    Member: ['name', 'value'],
    Element: ['value'],
    Array: ['elements'],
    String: [],
    Number: [],
    Boolean: [],
    Null: [],
    Identifier: [],
    NaN: [],
    Infinity: [],
};
/** Determines if a given value is an AST node. */
export function isNode(value) {
    return !!value && typeof value === 'object' && 'type' in value && typeof value.type === 'string';
}
/** Get ObjectNode members as object */
export function getObjMembers(node) {
    const members = {};
    if (node.type !== 'Object') {
        return members;
    }
    for (let i = 0; i < node.members.length; i++) {
        const m = node.members[i];
        if (m.name.type !== 'String') {
            continue;
        }
        members[m.name.value] = { ...m.value, index: i };
    }
    return members;
}
/**
 * Inject members to ObjectNode
 * @param {ObjectNode} node
 * @param {MemberNode[]} members
 */
export function injectObjMembers(node, members = []) {
    if (node.type !== 'Object') {
        return;
    }
    node.members.push(...members);
}
/**
 * Variation of Momoa’s traverse(), which keeps track of global path.
 * Allows mutation of AST (along with any consequences)
 */
export function traverse(root, visitor) {
    /**
     * Recursively visits a node.
     * @param {AnyNode} node The node to visit.
     * @param {AnyNode} [parent] The parent of the node to visit.
     * @return {void}
     */
    function visitNode(node, parent, path = []) {
        const nextPath = [...path];
        if (node.type === 'Member') {
            const { name } = node;
            nextPath.push('value' in name ? name.value : String(name));
        }
        visitor.enter?.(node, parent, nextPath);
        const childNode = CHILD_KEYS[node.type];
        for (const key of childNode ?? []) {
            const value = node[key];
            if (value && typeof value === 'object') {
                if (Array.isArray(value)) {
                    for (let i = 0; i < value.length; i++) {
                        visitNode(
                        // @ts-expect-error this is safe
                        value[i], node, key === 'elements' ? [...nextPath, String(i)] : nextPath);
                    }
                }
                else if (isNode(value)) {
                    visitNode(value, node, nextPath);
                }
            }
        }
        visitor.exit?.(node, parent, nextPath);
    }
    visitNode(root, undefined, []);
}
/** Determine if an input is likely a JSON string */
export function maybeRawJSON(input) {
    return typeof input === 'string' && input.trim().startsWith('{');
}
/** Find Momoa node by traversing paths */
export function findNode(node, path) {
    if (!path.length) {
        return;
    }
    let nextNode;
    switch (node.type) {
        // for Document nodes, dive into body for “free” (not part of the path)
        case 'Document': {
            return findNode(node.body, path);
        }
        case 'Object': {
            const [member, ...rest] = path;
            nextNode = node.members.find((m) => m.name.type === 'String' && m.name.value === member)?.value;
            if (nextNode && rest.length) {
                return findNode(nextNode, path.slice(1));
            }
            break;
        }
        case 'Array': {
            const [_index, ...rest] = path;
            const index = Number.parseInt(_index, 10);
            nextNode = node.elements[index]?.value;
            if (nextNode && rest.length) {
                return findNode(nextNode, path.slice(1));
            }
            break;
        }
    }
    return nextNode;
}
export function toMomoa(input, { continueOnError, filename, logger, yamlToMomoa }) {
    let src = '';
    if (typeof input === 'string') {
        src = input;
    }
    let document = {};
    if (typeof input === 'string' && !maybeRawJSON(input)) {
        if (yamlToMomoa) {
            try {
                document = yamlToMomoa(input); // if string, but not JSON, attempt YAML
            }
            catch (err) {
                logger.error({ group: 'parser', label: 'json', message: String(err), filename, src: input, continueOnError });
            }
        }
        else {
            logger.error({
                group: 'parser',
                label: 'yaml',
                message: `Install \`yaml-to-momoa\` package to parse YAML, and pass in as option, e.g.:

    import { parse } from '@terrazzo/parser';
    import yamlToMomoa from 'yaml-to-momoa';

    parse(yamlString, { yamlToMomoa });`,
                continueOnError: false, // fail here; no point in continuing
            });
        }
    }
    else {
        document = parseJSON(typeof input === 'string' ? input : JSON.stringify(input, undefined, 2), // everything else: assert it’s JSON-serializable
        {
            mode: 'jsonc',
            ranges: true,
            tokens: true,
        });
    }
    if (!src) {
        src = print(document, { indent: 2 });
    }
    return { src, document };
}
//# sourceMappingURL=json.js.map