import type { TokenNormalized } from '../types.js';
import type { TransformCSSValueOptions } from './css-types.js';
export * from './boolean.js';
export * from './border.js';
export * from './color.js';
export * from './cubic-bezier.js';
export * from './dimension.js';
export * from './duration.js';
export * from './font-family.js';
export * from './font-weight.js';
export * from './gradient.js';
export * from './lib.js';
export * from './link.js';
export * from './number.js';
export * from './shadow.js';
export * from './string.js';
export * from './stroke-style.js';
export * from './transition.js';
export * from './typography.js';
/** Main CSS Transform */
export declare function transformCSSValue<T extends TokenNormalized = TokenNormalized>(token: T, { mode, ...options }: {
    mode: keyof T['mode'];
} & TransformCSSValueOptions): string | Record<string, string> | import("./color.js").WideGamutColorValue | undefined;
//# sourceMappingURL=index.d.ts.map