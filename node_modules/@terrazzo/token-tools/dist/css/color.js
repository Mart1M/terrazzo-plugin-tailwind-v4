import { displayable, formatCss, formatHex, formatHex8, toGamut } from 'culori/fn';
import { parseColor, tokenToCulori } from '../color.js';
import { defaultAliasTransform } from './lib.js';
/** Convert color value to CSS string */
export function transformColor(token, options) {
    const { transformAlias = defaultAliasTransform, tokensSet } = options;
    if (token.aliasChain?.[0]) {
        return transformAlias(tokensSet[token.aliasChain[0]]);
    }
    const { colorSpace, channels, alpha = 1, } = typeof token.$value === 'string' ? parseColor(token.$value) : token.$value;
    const color = tokenToCulori({ colorSpace, channels, alpha });
    if (!color) {
        throw new Error(`Canâ€™t convert color ${JSON.stringify(token.$value)} to Culori color`);
    }
    let formatColor = formatCss;
    if (options.color?.legacyHex) {
        formatColor = color.alpha !== 1 ? formatHex8 : formatHex;
    }
    return displayable(color)
        ? formatColor(color)
        : {
            '.': formatColor(color),
            srgb: (typeof token.$value === 'object' && token.$value.hex) ||
                formatColor(toGamut('rgb', 'oklch')(color)),
            p3: formatColor(toGamut('p3', 'oklch')(color)),
            rec2020: formatColor(toGamut('rec2020', 'oklch')(color)),
        };
}
//# sourceMappingURL=color.js.map