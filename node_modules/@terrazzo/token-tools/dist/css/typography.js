import { kebabCase } from '../string.js';
import { transformDimension } from './dimension.js';
import { transformFontFamily } from './font-family.js';
import { transformFontWeight } from './font-weight.js';
import { defaultAliasTransform } from './lib.js';
import { transformNumber } from './number.js';
import { transformString } from './string.js';
/** Convert typography value to multiple CSS values */
export function transformTypography(token, options) {
    const { tokensSet, transformAlias = defaultAliasTransform } = options;
    const output = {};
    for (const [property, subvalue] of Object.entries(token.$value)) {
        let transformedValue;
        const aliasedID = token.aliasChain?.[0] ?? token.partialAliasOf?.[property];
        if (aliasedID) {
            const resolvedToken = tokensSet[aliasedID];
            transformedValue = transformAlias(
            // if resolving against a typography token, inject the property as well
            resolvedToken.$type === 'typography' ? { id: `${aliasedID}-${property}` } : resolvedToken);
        }
        else {
            switch (property) {
                case 'fontFamily': {
                    transformedValue = transformFontFamily({ $value: subvalue }, options);
                    break;
                }
                case 'fontSize':
                case 'letterSpacing': {
                    transformedValue = transformDimension({ $value: subvalue }, options);
                    break;
                }
                case 'fontWeight': {
                    transformedValue = transformFontWeight({ $value: subvalue }, options);
                    break;
                }
                case 'lineHeight': {
                    if (typeof subvalue === 'number') {
                        transformedValue = transformNumber({ $value: subvalue }, options);
                    }
                    else {
                        transformedValue = transformDimension({ $value: subvalue }, options);
                    }
                    break;
                }
                default: {
                    transformedValue = transformString({ $value: subvalue }, options);
                    break;
                }
            }
        }
        output[kebabCase(property)] = transformedValue;
    }
    return output;
}
//# sourceMappingURL=typography.js.map